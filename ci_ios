
pipeline {
  agent any
  // 定义环境变量
  environment {
    // 需要构建的分支名称
    branch = "release"
    // 项目名称
    projectName = "Cosbike"
    // 阿帕奇服务器iOS项目根目录
    webBasePath = "/Library/WebServer/Documents/ios/"
  }
  stages {
    stage('初始化') {
      steps {
        echo "分支: ${env.branch}"
        echo "平台: ${env.platform}"
        echo "部署环境: ${env.deploy}"
        script {
          // 下载项目
          sh """
          rm -rf cos-power-ios;
          export https_proxy=http://127.0.0.1:7897 http_proxy=http://127.0.0.1:7897 all_proxy=socks5://127.0.0.1:7897;
          git clone --branch ${env.branch} http://git.gydev.cn/cos-power/cos-power-ios.git
          """

          // 修改签名信息
          // replaceFileContent("cos-power-ios/Cosbike/Cosbike.xcodeproj/project.pbxproj", [
          //   '"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";': '"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Distribution";',
          //   '"DEVELOPMENT_TEAM[sdk=iphoneos*]" = G3FF6XA5VG;': '"DEVELOPMENT_TEAM[sdk=iphoneos*]" = ZQCCGMM2X2;',
          //   'PRODUCT_BUNDLE_IDENTIFIER = com.velobank.dev;': 'PRODUCT_BUNDLE_IDENTIFIER = com.velotest.qa;',
          //   '"PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]" = veloDevAdHocDevelopment;': '"PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]" = velo_adhoc_qa;'
          // ])
          replaceFileContent("cos-power-ios/Cosbike/Cosbike.xcodeproj/project.pbxproj", [
            '"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";': '"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Distribution";',
            '"DEVELOPMENT_TEAM[sdk=iphoneos*]" = 7QN49CU26P;': '"DEVELOPMENT_TEAM[sdk=iphoneos*]" = ZQCCGMM2X2;',
            'PRODUCT_BUNDLE_IDENTIFIER = cn.xfxpower.cosbike;': 'PRODUCT_BUNDLE_IDENTIFIER = com.velotest.qa;',
            '"PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]" = XfxChangePowerDevelopmentProvisionProfile;': '"PROVISIONING_PROFILE_SPECIFIER[sdk=iphoneos*]" = velo_adhoc_qa;'
          ])
        }
      }
    }
  }
}

/**
 * 文件内容替换
 * @param filePath 文件路径
 * @param replacements 要替换的键值对 Map
 */
def replaceFileContent(String filePath, Map replacements) {
  try {
    // 读取文件内容
    def content = readFile(filePath)
    
    // 执行所有替换
    replacements.each { oldString, newValue ->
      content = content.replace(oldString, newValue)
    }
    
    // 写入文件
    writeFile file: filePath, text: content
  } catch (Exception e) {
    error "replace file content ${filePath} fail: ${e.getMessage()}"
    throw e
  }
}